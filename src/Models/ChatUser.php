<?php
namespace Socrates\Models;


/**
 * @package   CRM
 * @copyright Socrates LLC (c) 2004-2018
 *
 * Generated from /buildkit/build/chatbot/sites/all/modules/socrates/tools/extensions/civicrm-chatbot/xml/schema/CRM/Chat/ChatUser.xml
 * DO NOT EDIT.  Generated by Socrates\Core_CodeGen
 * (GenCodeChecksum:e7248421e7999a894c6554ae75caf695)
 */

/**
 * Database access object for the ChatUser entity.
 */
class ChatUser extends Model
{

    /**
     * Static instance to hold the table name.
     *
     * @var string
     */
    protected $table = 'chat_users';

    /**
     * Should Socrates log any modifications to this table in the socrates_log table.
     *
     * @var bool
     */
    static $_log = true;

    // /**
    //  * Unique ID
    //  *
    //  * @var int unsigned
    //  */
    // public $id;

    // /**
    //  * FK to Contact
    //  *
    //  * @var int unsigned
    //  */
    // public $contact_id;

    // /**
    //  * Service that the user account belongs to
    //  *
    //  * @var string
    //  */
    // public $service;

    // /**
    //  * User identifier
    //  *
    //  * @var string
    //  */
    // public $user_id;

    /**
     * @var string[]
     *
     * @psalm-var array{0: string, 1: string, 2: string}
     */
    protected array $fillable = [
    'user_id', 
    'service', 
    'contact_id', 
    ];

    public static function getsingle($data)
    {
        if (isset($data['service']) && isset($data['user_id'])) {
            if (!$userData = static::where($data)->first()) {
                $userData = Contact::firstOrCreate(
                    [
                    'user_id' => $data['user_id']
                    ]
                )->users()->create($data);
            }
            return $userData->toArray();
        }

        dd('aquiiiii', $data);
        return static::firstOrCreate($data)->toArray();
    }


    /**
     * Returns the names of this table
     *
     * @return string
     */
    public static function getTableName()
    {
        return self::$_tableName;
    }

}
